/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace DataTypes {
  export type ReserveDataStruct = {
    reserveId: PromiseOrValue<BigNumberish>;
    underlyingAsset: PromiseOrValue<string>;
    oTokenAddress: PromiseOrValue<string>;
    moneyMarketAddress: PromiseOrValue<string>;
    lastSupplyIndex: PromiseOrValue<BigNumberish>;
    borrowingInterestPerSecond: PromiseOrValue<BigNumberish>;
    lastMoneyMarketBalance: PromiseOrValue<BigNumberish>;
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>;
    totalBorrows: PromiseOrValue<BigNumberish>;
    interestModelAddress: PromiseOrValue<string>;
    treasuryFactor: PromiseOrValue<BigNumberish>;
    isMoneyMarketOn: PromiseOrValue<boolean>;
  };

  export type ReserveDataStructOutput = [
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    string,
    BigNumber,
    boolean,
  ] & {
    reserveId: BigNumber;
    underlyingAsset: string;
    oTokenAddress: string;
    moneyMarketAddress: string;
    lastSupplyIndex: BigNumber;
    borrowingInterestPerSecond: BigNumber;
    lastMoneyMarketBalance: BigNumber;
    lastUpdateTimestamp: number;
    totalBorrows: BigNumber;
    interestModelAddress: string;
    treasuryFactor: BigNumber;
    isMoneyMarketOn: boolean;
  };
}

export interface OpenSkyPoolInterface extends utils.Interface {
  functions: {
    'SETTINGS()': FunctionFragment;
    'borrow(uint256,uint256,uint256,address,uint256,address)': FunctionFragment;
    'claimERC20Rewards(uint256,address)': FunctionFragment;
    'closeMoneyMarket(uint256)': FunctionFragment;
    'create(address,string,string,uint8)': FunctionFragment;
    'deposit(uint256,uint256,address,uint256)': FunctionFragment;
    'endLiquidation(uint256,uint256)': FunctionFragment;
    'extend(uint256,uint256,uint256,address)': FunctionFragment;
    'getAvailableLiquidity(uint256)': FunctionFragment;
    'getBorrowLimitByOracle(uint256,address,uint256)': FunctionFragment;
    'getReserveData(uint256)': FunctionFragment;
    'getReserveNormalizedIncome(uint256)': FunctionFragment;
    'getTVL(uint256)': FunctionFragment;
    'getTotalBorrowBalance(uint256)': FunctionFragment;
    'openMoneyMarket(uint256)': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'repay(uint256)': FunctionFragment;
    'reserves(uint256)': FunctionFragment;
    'setInterestModelAddress(uint256,address)': FunctionFragment;
    'setTreasuryFactor(uint256,uint256)': FunctionFragment;
    'startLiquidation(uint256)': FunctionFragment;
    'unpause()': FunctionFragment;
    'withdraw(uint256,uint256,address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'SETTINGS'
      | 'borrow'
      | 'claimERC20Rewards'
      | 'closeMoneyMarket'
      | 'create'
      | 'deposit'
      | 'endLiquidation'
      | 'extend'
      | 'getAvailableLiquidity'
      | 'getBorrowLimitByOracle'
      | 'getReserveData'
      | 'getReserveNormalizedIncome'
      | 'getTVL'
      | 'getTotalBorrowBalance'
      | 'openMoneyMarket'
      | 'pause'
      | 'paused'
      | 'repay'
      | 'reserves'
      | 'setInterestModelAddress'
      | 'setTreasuryFactor'
      | 'startLiquidation'
      | 'unpause'
      | 'withdraw',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'SETTINGS', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'borrow',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimERC20Rewards',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'closeMoneyMarket', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'create',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'endLiquidation',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'extend',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getAvailableLiquidity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getBorrowLimitByOracle',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getReserveData', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getReserveNormalizedIncome', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTVL', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTotalBorrowBalance', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'openMoneyMarket', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'repay', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'reserves', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'setInterestModelAddress',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTreasuryFactor',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'startLiquidation', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'SETTINGS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'borrow', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimERC20Rewards', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'closeMoneyMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'create', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'endLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'extend', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAvailableLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowLimitByOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveNormalizedIncome', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalBorrowBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'openMoneyMarket', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'repay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'reserves', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setInterestModelAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTreasuryFactor', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'startLiquidation', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'Borrow(uint256,address,address,uint256)': EventFragment;
    'CloseMoneyMarket(uint256)': EventFragment;
    'Create(uint256,address,address,string,string,uint8)': EventFragment;
    'Deposit(uint256,address,uint256,uint256)': EventFragment;
    'EndLiquidation(uint256,uint256,address,uint256,address,uint256,uint256)': EventFragment;
    'Extend(uint256,address,uint256,uint256)': EventFragment;
    'OpenMoneyMarket(uint256)': EventFragment;
    'Paused(address)': EventFragment;
    'Repay(uint256,address,address,uint256,uint256,uint256)': EventFragment;
    'SetInterestModelAddress(uint256,address)': EventFragment;
    'SetTreasuryFactor(uint256,uint256)': EventFragment;
    'StartLiquidation(uint256,uint256,address,uint256,address)': EventFragment;
    'Unpaused(address)': EventFragment;
    'Withdraw(uint256,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Borrow'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CloseMoneyMarket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Create'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EndLiquidation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Extend'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OpenMoneyMarket'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Repay'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetInterestModelAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTreasuryFactor'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'StartLiquidation'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment;
}

export interface BorrowEventObject {
  reserveId: BigNumber;
  user: string;
  onBehalfOf: string;
  loanId: BigNumber;
}
export type BorrowEvent = TypedEvent<[BigNumber, string, string, BigNumber], BorrowEventObject>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface CloseMoneyMarketEventObject {
  reserveId: BigNumber;
}
export type CloseMoneyMarketEvent = TypedEvent<[BigNumber], CloseMoneyMarketEventObject>;

export type CloseMoneyMarketEventFilter = TypedEventFilter<CloseMoneyMarketEvent>;

export interface CreateEventObject {
  reserveId: BigNumber;
  underlyingAsset: string;
  oTokenAddress: string;
  name: string;
  symbol: string;
  decimals: number;
}
export type CreateEvent = TypedEvent<[BigNumber, string, string, string, string, number], CreateEventObject>;

export type CreateEventFilter = TypedEventFilter<CreateEvent>;

export interface DepositEventObject {
  reserveId: BigNumber;
  onBehalfOf: string;
  amount: BigNumber;
  referralCode: BigNumber;
}
export type DepositEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface EndLiquidationEventObject {
  reserveId: BigNumber;
  loanId: BigNumber;
  nftAddress: string;
  tokenId: BigNumber;
  operator: string;
  repayAmount: BigNumber;
  borrowBalance: BigNumber;
}
export type EndLiquidationEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string, BigNumber, BigNumber],
  EndLiquidationEventObject
>;

export type EndLiquidationEventFilter = TypedEventFilter<EndLiquidationEvent>;

export interface ExtendEventObject {
  reserveId: BigNumber;
  onBehalfOf: string;
  oldLoanId: BigNumber;
  newLoanId: BigNumber;
}
export type ExtendEvent = TypedEvent<[BigNumber, string, BigNumber, BigNumber], ExtendEventObject>;

export type ExtendEventFilter = TypedEventFilter<ExtendEvent>;

export interface OpenMoneyMarketEventObject {
  reserveId: BigNumber;
}
export type OpenMoneyMarketEvent = TypedEvent<[BigNumber], OpenMoneyMarketEventObject>;

export type OpenMoneyMarketEventFilter = TypedEventFilter<OpenMoneyMarketEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RepayEventObject {
  reserveId: BigNumber;
  repayer: string;
  onBehalfOf: string;
  loanId: BigNumber;
  repayAmount: BigNumber;
  penalty: BigNumber;
}
export type RepayEvent = TypedEvent<[BigNumber, string, string, BigNumber, BigNumber, BigNumber], RepayEventObject>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface SetInterestModelAddressEventObject {
  reserveId: BigNumber;
  interestModelAddress: string;
}
export type SetInterestModelAddressEvent = TypedEvent<[BigNumber, string], SetInterestModelAddressEventObject>;

export type SetInterestModelAddressEventFilter = TypedEventFilter<SetInterestModelAddressEvent>;

export interface SetTreasuryFactorEventObject {
  reserveId: BigNumber;
  factor: BigNumber;
}
export type SetTreasuryFactorEvent = TypedEvent<[BigNumber, BigNumber], SetTreasuryFactorEventObject>;

export type SetTreasuryFactorEventFilter = TypedEventFilter<SetTreasuryFactorEvent>;

export interface StartLiquidationEventObject {
  reserveId: BigNumber;
  loanId: BigNumber;
  nftAddress: string;
  tokenId: BigNumber;
  operator: string;
}
export type StartLiquidationEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber, string],
  StartLiquidationEventObject
>;

export type StartLiquidationEventFilter = TypedEventFilter<StartLiquidationEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawEventObject {
  reserveId: BigNumber;
  onBehalfOf: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[BigNumber, string, BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface OpenSkyPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenSkyPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SETTINGS(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    claimERC20Rewards(
      reserveId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    closeMoneyMarket(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    create(
      underlyingAsset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    deposit(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    endLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    extend(
      oldLoanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowLimitByOracle(
      reserveId: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getReserveData(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[DataTypes.ReserveDataStructOutput]>;

    getReserveNormalizedIncome(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    openMoneyMarket(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    reserves(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        string,
        BigNumber,
        boolean,
      ] & {
        reserveId: BigNumber;
        underlyingAsset: string;
        oTokenAddress: string;
        moneyMarketAddress: string;
        lastSupplyIndex: BigNumber;
        borrowingInterestPerSecond: BigNumber;
        lastMoneyMarketBalance: BigNumber;
        lastUpdateTimestamp: number;
        totalBorrows: BigNumber;
        interestModelAddress: string;
        treasuryFactor: BigNumber;
        isMoneyMarketOn: boolean;
      }
    >;

    setInterestModelAddress(
      reserveId: PromiseOrValue<BigNumberish>,
      interestModelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    setTreasuryFactor(
      reserveId: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    startLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

    withdraw(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  SETTINGS(overrides?: CallOverrides): Promise<string>;

  borrow(
    reserveId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  claimERC20Rewards(
    reserveId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  closeMoneyMarket(
    reserveId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  create(
    underlyingAsset: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  deposit(
    reserveId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    referralCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  endLiquidation(
    loanId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  extend(
    oldLoanId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    duration: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowLimitByOracle(
    reserveId: PromiseOrValue<BigNumberish>,
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getReserveData(
    reserveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<DataTypes.ReserveDataStructOutput>;

  getReserveNormalizedIncome(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  openMoneyMarket(
    reserveId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  repay(
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  reserves(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      string,
      BigNumber,
      boolean,
    ] & {
      reserveId: BigNumber;
      underlyingAsset: string;
      oTokenAddress: string;
      moneyMarketAddress: string;
      lastSupplyIndex: BigNumber;
      borrowingInterestPerSecond: BigNumber;
      lastMoneyMarketBalance: BigNumber;
      lastUpdateTimestamp: number;
      totalBorrows: BigNumber;
      interestModelAddress: string;
      treasuryFactor: BigNumber;
      isMoneyMarketOn: boolean;
    }
  >;

  setInterestModelAddress(
    reserveId: PromiseOrValue<BigNumberish>,
    interestModelAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  setTreasuryFactor(
    reserveId: PromiseOrValue<BigNumberish>,
    factor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  startLiquidation(
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>;

  withdraw(
    reserveId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    SETTINGS(overrides?: CallOverrides): Promise<string>;

    borrow(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    claimERC20Rewards(
      reserveId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    closeMoneyMarket(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    create(
      underlyingAsset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    deposit(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    endLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    extend(
      oldLoanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>;

    getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowLimitByOracle(
      reserveId: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveData(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<DataTypes.ReserveDataStructOutput>;

    getReserveNormalizedIncome(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    openMoneyMarket(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    repay(loanId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    reserves(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        string,
        BigNumber,
        boolean,
      ] & {
        reserveId: BigNumber;
        underlyingAsset: string;
        oTokenAddress: string;
        moneyMarketAddress: string;
        lastSupplyIndex: BigNumber;
        borrowingInterestPerSecond: BigNumber;
        lastMoneyMarketBalance: BigNumber;
        lastUpdateTimestamp: number;
        totalBorrows: BigNumber;
        interestModelAddress: string;
        treasuryFactor: BigNumber;
        isMoneyMarketOn: boolean;
      }
    >;

    setInterestModelAddress(
      reserveId: PromiseOrValue<BigNumberish>,
      interestModelAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTreasuryFactor(
      reserveId: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    startLiquidation(loanId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'Borrow(uint256,address,address,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      user?: null,
      onBehalfOf?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
    ): BorrowEventFilter;
    Borrow(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      user?: null,
      onBehalfOf?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
    ): BorrowEventFilter;

    'CloseMoneyMarket(uint256)'(reserveId?: null): CloseMoneyMarketEventFilter;
    CloseMoneyMarket(reserveId?: null): CloseMoneyMarketEventFilter;

    'Create(uint256,address,address,string,string,uint8)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      underlyingAsset?: PromiseOrValue<string> | null,
      oTokenAddress?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      decimals?: null,
    ): CreateEventFilter;
    Create(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      underlyingAsset?: PromiseOrValue<string> | null,
      oTokenAddress?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      decimals?: null,
    ): CreateEventFilter;

    'Deposit(uint256,address,uint256,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      amount?: null,
      referralCode?: null,
    ): DepositEventFilter;
    Deposit(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      amount?: null,
      referralCode?: null,
    ): DepositEventFilter;

    'EndLiquidation(uint256,uint256,address,uint256,address,uint256,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      operator?: null,
      repayAmount?: null,
      borrowBalance?: null,
    ): EndLiquidationEventFilter;
    EndLiquidation(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      operator?: null,
      repayAmount?: null,
      borrowBalance?: null,
    ): EndLiquidationEventFilter;

    'Extend(uint256,address,uint256,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      oldLoanId?: null,
      newLoanId?: null,
    ): ExtendEventFilter;
    Extend(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      oldLoanId?: null,
      newLoanId?: null,
    ): ExtendEventFilter;

    'OpenMoneyMarket(uint256)'(reserveId?: null): OpenMoneyMarketEventFilter;
    OpenMoneyMarket(reserveId?: null): OpenMoneyMarketEventFilter;

    'Paused(address)'(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    'Repay(uint256,address,address,uint256,uint256,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      repayer?: null,
      onBehalfOf?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      repayAmount?: null,
      penalty?: null,
    ): RepayEventFilter;
    Repay(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      repayer?: null,
      onBehalfOf?: PromiseOrValue<string> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      repayAmount?: null,
      penalty?: null,
    ): RepayEventFilter;

    'SetInterestModelAddress(uint256,address)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      interestModelAddress?: null,
    ): SetInterestModelAddressEventFilter;
    SetInterestModelAddress(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      interestModelAddress?: null,
    ): SetInterestModelAddressEventFilter;

    'SetTreasuryFactor(uint256,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      factor?: null,
    ): SetTreasuryFactorEventFilter;
    SetTreasuryFactor(reserveId?: PromiseOrValue<BigNumberish> | null, factor?: null): SetTreasuryFactorEventFilter;

    'StartLiquidation(uint256,uint256,address,uint256,address)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      operator?: null,
    ): StartLiquidationEventFilter;
    StartLiquidation(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      loanId?: PromiseOrValue<BigNumberish> | null,
      nftAddress?: PromiseOrValue<string> | null,
      tokenId?: null,
      operator?: null,
    ): StartLiquidationEventFilter;

    'Unpaused(address)'(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    'Withdraw(uint256,address,uint256)'(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
    Withdraw(
      reserveId?: PromiseOrValue<BigNumberish> | null,
      onBehalfOf?: PromiseOrValue<string> | null,
      amount?: null,
    ): WithdrawEventFilter;
  };

  estimateGas: {
    SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    claimERC20Rewards(
      reserveId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    closeMoneyMarket(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    create(
      underlyingAsset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    deposit(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    endLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    extend(
      oldLoanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowLimitByOracle(
      reserveId: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveData(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getReserveNormalizedIncome(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    openMoneyMarket(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    reserves(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    setInterestModelAddress(
      reserveId: PromiseOrValue<BigNumberish>,
      interestModelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    setTreasuryFactor(
      reserveId: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    startLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;

    withdraw(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    claimERC20Rewards(
      reserveId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    closeMoneyMarket(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    create(
      underlyingAsset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    deposit(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    endLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    extend(
      oldLoanId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      duration: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    getAvailableLiquidity(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBorrowLimitByOracle(
      reserveId: PromiseOrValue<BigNumberish>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReserveData(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserveNormalizedIncome(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalBorrowBalance(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    openMoneyMarket(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    reserves(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setInterestModelAddress(
      reserveId: PromiseOrValue<BigNumberish>,
      interestModelAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    setTreasuryFactor(
      reserveId: PromiseOrValue<BigNumberish>,
      factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    startLiquidation(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>;

    withdraw(
      reserveId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
