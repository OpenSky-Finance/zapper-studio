/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace IOpenSkyDataProvider {
  export type LoanDataStruct = {
    loanId: PromiseOrValue<BigNumberish>;
    totalBorrows: PromiseOrValue<BigNumberish>;
    borrowBalance: PromiseOrValue<BigNumberish>;
    borrowBegin: PromiseOrValue<BigNumberish>;
    borrowDuration: PromiseOrValue<BigNumberish>;
    borrowOverdueTime: PromiseOrValue<BigNumberish>;
    liquidatableTime: PromiseOrValue<BigNumberish>;
    extendableTime: PromiseOrValue<BigNumberish>;
    borrowRate: PromiseOrValue<BigNumberish>;
    interestPerSecond: PromiseOrValue<BigNumberish>;
    penalty: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type LoanDataStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
  ] & {
    loanId: BigNumber;
    totalBorrows: BigNumber;
    borrowBalance: BigNumber;
    borrowBegin: number;
    borrowDuration: number;
    borrowOverdueTime: number;
    liquidatableTime: number;
    extendableTime: number;
    borrowRate: BigNumber;
    interestPerSecond: BigNumber;
    penalty: BigNumber;
    status: number;
  };

  export type ReserveDataStruct = {
    reserveId: PromiseOrValue<BigNumberish>;
    underlyingAsset: PromiseOrValue<string>;
    oTokenAddress: PromiseOrValue<string>;
    TVL: PromiseOrValue<BigNumberish>;
    totalDeposits: PromiseOrValue<BigNumberish>;
    totalBorrowsBalance: PromiseOrValue<BigNumberish>;
    supplyRate: PromiseOrValue<BigNumberish>;
    borrowRate: PromiseOrValue<BigNumberish>;
    availableLiquidity: PromiseOrValue<BigNumberish>;
  };

  export type ReserveDataStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    reserveId: BigNumber;
    underlyingAsset: string;
    oTokenAddress: string;
    TVL: BigNumber;
    totalDeposits: BigNumber;
    totalBorrowsBalance: BigNumber;
    supplyRate: BigNumber;
    borrowRate: BigNumber;
    availableLiquidity: BigNumber;
  };
}

export interface OpenSkyDataProviderInterface extends utils.Interface {
  functions: {
    'SETTINGS()': FunctionFragment;
    'getAvailableLiquidity(uint256)': FunctionFragment;
    'getBorrowRate(uint256,uint256,uint256,uint256,uint256)': FunctionFragment;
    'getLoanData(uint256)': FunctionFragment;
    'getLoanSupplyRate(uint256)': FunctionFragment;
    'getLoansByUser(address)': FunctionFragment;
    'getMoneyMarketSupplyRateInstant(uint256)': FunctionFragment;
    'getReserveData(uint256)': FunctionFragment;
    'getSupplyBalance(uint256,address)': FunctionFragment;
    'getSupplyRate(uint256)': FunctionFragment;
    'getTVL(uint256)': FunctionFragment;
    'getTotalBorrowBalance(uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'SETTINGS'
      | 'getAvailableLiquidity'
      | 'getBorrowRate'
      | 'getLoanData'
      | 'getLoanSupplyRate'
      | 'getLoansByUser'
      | 'getMoneyMarketSupplyRateInstant'
      | 'getReserveData'
      | 'getSupplyBalance'
      | 'getSupplyRate'
      | 'getTVL'
      | 'getTotalBorrowBalance',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'SETTINGS', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getAvailableLiquidity', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getBorrowRate',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'getLoanData', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getLoanSupplyRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getLoansByUser', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(
    functionFragment: 'getMoneyMarketSupplyRateInstant',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'getReserveData', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: 'getSupplyBalance',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'getSupplyRate', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTVL', values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(functionFragment: 'getTotalBorrowBalance', values: [PromiseOrValue<BigNumberish>]): string;

  decodeFunctionResult(functionFragment: 'SETTINGS', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getAvailableLiquidity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBorrowRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoanSupplyRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLoansByUser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMoneyMarketSupplyRateInstant', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReserveData', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSupplyBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSupplyRate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTVL', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTotalBorrowBalance', data: BytesLike): Result;

  events: {};
}

export interface OpenSkyDataProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OpenSkyDataProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SETTINGS(overrides?: CallOverrides): Promise<[string]>;

    getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBorrowRate(
      reserveId: PromiseOrValue<BigNumberish>,
      liquidityAmountToAdd: PromiseOrValue<BigNumberish>,
      liquidityAmountToRemove: PromiseOrValue<BigNumberish>,
      borrowAmountToAdd: PromiseOrValue<BigNumberish>,
      borrowAmountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLoanData(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IOpenSkyDataProvider.LoanDataStructOutput]>;

    getLoanSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getLoansByUser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getMoneyMarketSupplyRateInstant(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getReserveData(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[IOpenSkyDataProvider.ReserveDataStructOutput]>;

    getSupplyBalance(
      reserveId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  SETTINGS(overrides?: CallOverrides): Promise<string>;

  getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getBorrowRate(
    reserveId: PromiseOrValue<BigNumberish>,
    liquidityAmountToAdd: PromiseOrValue<BigNumberish>,
    liquidityAmountToRemove: PromiseOrValue<BigNumberish>,
    borrowAmountToAdd: PromiseOrValue<BigNumberish>,
    borrowAmountToRemove: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLoanData(
    loanId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IOpenSkyDataProvider.LoanDataStructOutput>;

  getLoanSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getLoansByUser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

  getMoneyMarketSupplyRateInstant(
    reserveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getReserveData(
    reserveId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IOpenSkyDataProvider.ReserveDataStructOutput>;

  getSupplyBalance(
    reserveId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    SETTINGS(overrides?: CallOverrides): Promise<string>;

    getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      reserveId: PromiseOrValue<BigNumberish>,
      liquidityAmountToAdd: PromiseOrValue<BigNumberish>,
      liquidityAmountToRemove: PromiseOrValue<BigNumberish>,
      borrowAmountToAdd: PromiseOrValue<BigNumberish>,
      borrowAmountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanData(
      loanId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IOpenSkyDataProvider.LoanDataStructOutput>;

    getLoanSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getLoansByUser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber[]>;

    getMoneyMarketSupplyRateInstant(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveData(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IOpenSkyDataProvider.ReserveDataStructOutput>;

    getSupplyBalance(
      reserveId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    SETTINGS(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableLiquidity(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getBorrowRate(
      reserveId: PromiseOrValue<BigNumberish>,
      liquidityAmountToAdd: PromiseOrValue<BigNumberish>,
      liquidityAmountToRemove: PromiseOrValue<BigNumberish>,
      borrowAmountToAdd: PromiseOrValue<BigNumberish>,
      borrowAmountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLoanData(loanId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getLoanSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getLoansByUser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getMoneyMarketSupplyRateInstant(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReserveData(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getSupplyBalance(
      reserveId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    getTotalBorrowBalance(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    SETTINGS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableLiquidity(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getBorrowRate(
      reserveId: PromiseOrValue<BigNumberish>,
      liquidityAmountToAdd: PromiseOrValue<BigNumberish>,
      liquidityAmountToRemove: PromiseOrValue<BigNumberish>,
      borrowAmountToAdd: PromiseOrValue<BigNumberish>,
      borrowAmountToRemove: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoanData(loanId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLoanSupplyRate(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLoansByUser(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMoneyMarketSupplyRateInstant(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReserveData(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSupplyBalance(
      reserveId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSupplyRate(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTVL(reserveId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalBorrowBalance(
      reserveId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
